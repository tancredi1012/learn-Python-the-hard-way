import numpy as np
#scipy.special for the sigmoid function expit()
import scipy.special

#neural network class definition
class neuralNetwork:
    
    #initialise the neural network
    def __init__(self,inputnodes,hiddennodes,outputnodes,learningrate):
        #set number of nodes in each input,hidden,output layer
        self.inodes=inputnodes
        self.hnodes=hiddennodes
        self.onodes=outputnodes
        
        #learning rate
        self.lr=learningrate
        
        #link weight matrices, wih and who(weight_input_hidden,weight_hidden_output)
        #weights inside the arrays are w_i_j,where link is from node i to node j in the nex layer
        #w11 w21
        #w12 w22 etc
        #采用服从N(0，-1/sqrt(传入链接数目))的方式产生初始化权重
        self.wih=np.random.normal(0.0,pow(self.hnodes,-0.5),(self.hnodes,self.inodes))
        self.who=np.random.normal(0.0,pow(self.onodes,-0.5),(self.onodes,self.hnodes))
        
        #activation function is the sigmoid function
        self.activation_function=lambda x:scipy.special.expit(x)
        pass
    
    #train the neural network
    def train(self,inputs_list,targets_list):
        # convert input list to 2d array
        #输入，和目标输出
        inputs=np.array(inputs_list,ndmin=2).T
        targets=np.array(targets_list,ndmin=2).T
        
        #calculate the signal into hidden layer
        hidden_inputs=np.dot(self.wih,inputs)
        #calculate the signal emerging from hidden layer
        hidden_outputs=self.activation_function(hidden_inputs)
        
        #calculate the signal into final output layer
        final_inputs=np.dot(self.who,hidden_outputs)
        #calculate the signal emerging from hidden layer
        final_outputs=self.activation_function(final_inputs)
        
        #error is the (target-actual)
        output_errors=targets-final_outputs
        
        #hidden layer error is the output_error,split by weights,recombined at hidden nodes
        hidden_errors=np.dot(self.who.T,output_errors)
        
        #update the weights for the links between the hidden and output layers
        self.who+=self.lr*np.dot((output_errors*final_outputs*(1.0-final_outputs)),np.transpose(hidden_outputs))
        
        #update the weights for the links between the input and hidden layers
        self.wih+=self.lr*np.dot((hidden_errors*hidden_outputs*(1.0-hidden_outputs)),np.transpose(inputs))
        pass
    
    #query the neural network
    def query(self,inputs_list):
        # convert input list to 2d array
        inputs=np.array(inputs_list,ndmin=2).T
        
        #calculate the signal into hidden layer
        hidden_inputs=np.dot(self.wih,inputs)
        #calculate the signal emerging from hidden layer
        hidden_outputs=self.activation_function(hidden_inputs)
        
        #calculate the signal into final output layer
        final_inputs=np.dot(self.who,hidden_outputs)
        #calculate the signal emerging from hidden layer
        final_outputs=self.activation_function(final_inputs)
        return final_outputs
